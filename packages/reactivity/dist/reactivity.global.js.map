{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/baseHandlers.ts","../src/reactive.ts"],"sourcesContent":["export default {}\nexport const isObject = val => typeof val === 'object' && val !== null\nexport const isNumber = val => typeof val === 'number'  \nexport const isFunction = val => typeof val === 'function'  \nexport const isString = val => typeof val === 'string'  \nexport const isArray = Array.isArray  \nexport const extend = Object.assign\n\n// 判断属性是不是原型属性\nexport const hasOwn = (target, key) => Object.prototype.hasOwnProperty.call(target, key)\nexport const hasChanged = (oldValue, value) => oldValue !== value","import { extend } from \"@vue/shared\";\nimport { reactive, readonly } from \"./reactive\";\n\nconst get = createGetter();\nconst readonlyGet = createGetter(true); // 仅读的\nconst shallowGet = createGetter(false, true); // 非仅读， 浅的\nconst shallowReadonlyGet = createGetter(true, true); // 仅读， 浅的\nconst set = createSetter();\n\n// 响应式原理的核心在依赖收集\nconst readonlySet = {\n  set(target, key) {\n    console.warn(`cannot set on ${key}, readonly!!!`)\n  }\n}\n\nfunction createGetter(isReadonly = false, shallow = false) {\n  // 取值的时候第一个是目标， 第二个是属性。 第三个是代理对象\n  return function get(target, key, receiver) {\n    console.log(target, key, receiver);\n    \n    // proxy 和 reflect 一般情况下会联合使用\n    // 依赖收集\n    const res = Reflect.get(target, key, receiver)\n\n    if(!isReadonly) { // 如果对象是一个仅读的属性，那就意味着这个对象不可能被更改， 不可能更新视图， 不需要增条依赖收集\n      // 不是仅读的采取收集依赖\n    }\n\n    if(shallow) {\n      return res; // 如果是浅的说明不需要递归代理\n    }\n\n    // 如果是对象， 就递归代理，但是不是一开始就代理，是在用到这个对象的时候才进行代理\n    return isReadonly ? readonly(res): reactive(res); // 取值的时候再去代理 (懒代理)\n  }\n}\n\nfunction createSetter() {\n  return function set(target, key, value, receiver) { // value 是设置的值， 其他一样\n    const res = Reflect.set(target, key, value, receiver); // 和 target[key] = value 类似\n\n\n    // 触发视图更新， 做处理\n\n    console.log('设置值', key, value);\n\n    return res;\n  }\n}\n\n\nexport const mutableHandlers = {\n  get,\n  set\n}\nexport const shallowReactiveHandlers = {\n  get:  shallowGet,\n  set\n}\nexport const readonlyHandlers =extend ({\n  get:  readonlyGet\n}, readonlySet)\nexport const shallowReadonlyHandlers = extend({\n  get:  shallowReadonlyGet\n}, readonlySet)","import { isObject } from '@vue/shared';\nimport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers } from './baseHandlers';\n\nconst reactiveMap = new WeakMap(); // 对象{}的Key不能用对象，弱'引用'。 map 的 key 是可以用对象的。 weakMap 中的 key 只能是对象，如果引用的 key 被置为 null ,weakmap 会自行自动回收\nconst readonlyMap = new WeakMap()\nconst shallowReactiveMap = new WeakMap()\nconst shallowReadonlyMap = new WeakMap()\n\nexport function reactive(target: object) {\n  return createReactiveObject(target, mutableHandlers, reactiveMap)\n} \nexport function shallowReactive(target: object) {\n  return createReactiveObject(target, shallowReactiveHandlers, shallowReactiveMap)\n} \nexport function readonly(target: object) {\n  return createReactiveObject(target, readonlyHandlers, readonlyMap)\n} \nexport function shallowReadonly(target: object) {\n  return createReactiveObject(target, shallowReadonlyHandlers, shallowReadonlyMap)\n} \n\n\n// 以上4个方法最终使用的都是这一个方法，这个方法会根据参数的不同来进行不同的处理\nexport function createReactiveObject(target, baseHandlers, proxyMap) {\n  // 是不是对象\n  if(!isObject(target)) {\n    return target\n  }\n\n  // 创建代理对象返回。 做缓存， 不要重复代理\n  const existsProxy = proxyMap.get(target)\n  if(existsProxy) {\n    return existsProxy\n  }\n  const proxy = new Proxy(target, baseHandlers)\n  proxyMap.set(target, proxy)\n\n  return proxy\n}"],"names":[],"mappings":";;;EACO,MAAM,QAAQ,GAAG,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAA;EAK/D,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;;ECHnC,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;EAC3B,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;EACvC,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EAC7C,MAAM,kBAAkB,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;EACpD,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;EAE3B;EACA,MAAM,WAAW,GAAG;MAClB,GAAG,CAAC,MAAM,EAAE,GAAG,EAAA;EACb,QAAA,OAAO,CAAC,IAAI,CAAC,iBAAiB,GAAG,CAAA,aAAA,CAAe,CAAC,CAAA;OAClD;GACF,CAAA;EAED,SAAS,YAAY,CAAC,UAAU,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAA;;EAEvD,IAAA,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAA;UACvC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;;;EAInC,QAAA,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAA;EAM9C,QAAA,IAAG,OAAO,EAAE;cACV,OAAO,GAAG,CAAC;EACZ,SAAA;;EAGD,QAAA,OAAO,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;EACnD,KAAC,CAAA;EACH,CAAC;EAED,SAAS,YAAY,GAAA;MACnB,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAA;EAC9C,QAAA,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;;UAKtD,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EAE/B,QAAA,OAAO,GAAG,CAAC;EACb,KAAC,CAAA;EACH,CAAC;EAGM,MAAM,eAAe,GAAG;MAC7B,GAAG;MACH,GAAG;GACJ,CAAA;EACM,MAAM,uBAAuB,GAAG;EACrC,IAAA,GAAG,EAAG,UAAU;MAChB,GAAG;GACJ,CAAA;EACM,MAAM,gBAAgB,GAAE,MAAM,CAAE;EACrC,IAAA,GAAG,EAAG,WAAW;GAClB,EAAE,WAAW,CAAC,CAAA;EACR,MAAM,uBAAuB,GAAG,MAAM,CAAC;EAC5C,IAAA,GAAG,EAAG,kBAAkB;GACzB,EAAE,WAAW,CAAC;;EC9Df,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;EAClC,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAA;EACjC,MAAM,kBAAkB,GAAG,IAAI,OAAO,EAAE,CAAA;EACxC,MAAM,kBAAkB,GAAG,IAAI,OAAO,EAAE,CAAA;EAElC,SAAU,QAAQ,CAAC,MAAc,EAAA;MACrC,OAAO,oBAAoB,CAAC,MAAM,EAAE,eAAe,EAAE,WAAW,CAAC,CAAA;EACnE,CAAC;EACK,SAAU,eAAe,CAAC,MAAc,EAAA;MAC5C,OAAO,oBAAoB,CAAC,MAAM,EAAE,uBAAuB,EAAE,kBAAkB,CAAC,CAAA;EAClF,CAAC;EACK,SAAU,QAAQ,CAAC,MAAc,EAAA;MACrC,OAAO,oBAAoB,CAAC,MAAM,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAA;EACpE,CAAC;EACK,SAAU,eAAe,CAAC,MAAc,EAAA;MAC5C,OAAO,oBAAoB,CAAC,MAAM,EAAE,uBAAuB,EAAE,kBAAkB,CAAC,CAAA;EAClF,CAAC;EAGD;WACgB,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAA;;EAEjE,IAAA,IAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;EACpB,QAAA,OAAO,MAAM,CAAA;EACd,KAAA;;MAGD,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;EACxC,IAAA,IAAG,WAAW,EAAE;EACd,QAAA,OAAO,WAAW,CAAA;EACnB,KAAA;MACD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;EAC7C,IAAA,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;EAE3B,IAAA,OAAO,KAAK,CAAA;EACd;;;;;;;;;;;;;;;"}